import { app, BrowserWindow } from 'electron'
import { setSnulifeHandlers } from './snulife/window'
import { setEverytimeHandlers } from './everytime/window'
import { getEverytimeWindow, initializeEverytime } from './everytime'
import { getSnulifeWindow, initializeSnulife } from './snulife'
import { createWindow } from './mainWindow'


// eslint-disable-next-line @typescript-eslint/no-var-requires
const electronSquirrelStartup = require('electron-squirrel-startup')

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (electronSquirrelStartup) {
  // eslint-disable-line global-require
  app.quit()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

app.whenReady().then(() => {
  getEverytimeWindow()
  getSnulifeWindow()
  initializeEverytime()
  initializeSnulife()
  setEverytimeHandlers()
  setSnulifeHandlers()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
